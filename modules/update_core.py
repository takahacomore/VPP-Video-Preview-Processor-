import os
import sys
import requests
import hashlib
import importlib.util

UPDATE_URL = "https://update.takahacomore.ru/update.json"
VERSION_FILE = "version.py"


def get_current_version():
    try:
        spec = importlib.util.spec_from_file_location("version", VERSION_FILE)
        version_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(version_module)
        return getattr(version_module, "VERSION", "0.0.0")
    except Exception:
        return "0.0.0"


def parse_version(version_str):
    try:
        return tuple(map(int, version_str.split('_')[0].split('.')))
    except Exception:
        return (0, 0, 0)

def get_update_description(manifest):
    return manifest.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

def load_update_manifest():
    try:
        resp = requests.get(UPDATE_URL, timeout=10)
        if resp.status_code != 200:
            raise RuntimeError(f"HTTP {resp.status_code}")
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ update.json: {e}")
        return None


def compare_versions(local_version, remote_version):
    return parse_version(remote_version) > parse_version(local_version)


def get_files_to_update(manifest):
    files = []
    for name, meta in manifest.get("files", {}).items():
        local_path = os.path.join(os.getcwd(), name)
        if not os.path.exists(local_path):
            files.append((name, meta["url"]))
            continue

        with open(local_path, "rb") as f:
            file_hash = hashlib.sha256(f.read()).hexdigest()

        if file_hash != meta.get("hash"):
            files.append((name, meta["url"]))

    return files



def restart_application():
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    –Ω–æ–≤—ã–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Ç–µ–º –∂–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º –∏ —Å–∫—Ä–∏–ø—Ç–æ–º main.py.
    """
    print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ø–∞–ø–∫–∞ –≤—ã—à–µ modules/
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
    python_executable = sys.executable
    main_script = os.path.join(project_root, "main.py")
    # —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å–∞–º –¥–µ–ª–∞–µ—Ç replace —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.execv(python_executable, [python_executable, main_script])

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    current = get_current_version()
    manifest = load_update_manifest()

    if not manifest:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    elif compare_versions(current, manifest["version"]):
        print(f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {manifest['version']}")
        needed = get_files_to_update(manifest)
        print("–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã:")
        for name, url in needed:
            print(f" - {name}: {url}")
    else:
        print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
