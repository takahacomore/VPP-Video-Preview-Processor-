import os
import json
import hashlib
import subprocess
import threading
import signal
from pathlib import Path
from modules.ffmpeg_manager import get_ffmpeg_path, get_ffprobe_path
from modules.settings_manager import load_settings

THUMBNAILS_DIR = Path("thumbnails")
THUMBNAILS_DIR.mkdir(exist_ok=True)

VIDEO_EXTENSIONS = [".mp4", ".mov", ".avi", ".mkv", ".webm", ".mxf"]

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_active = False
current_process = None

def hash_path(file_path):
    return hashlib.sha1(str(file_path).encode("utf-8")).hexdigest()[:16]


def format_timecode(seconds, fps=25):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú:–°–°:–ö–ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º, –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç—É run_scene_detection.bat.
    
    Args:
        seconds (float): –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        fps (int): –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (25 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–∫–æ–¥ –ß–ß:–ú–ú:–°–°:–ö–ö
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if seconds is None or not isinstance(seconds, (int, float)):
        seconds = 0.0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ fps
    if fps is None or not isinstance(fps, (int, float)) or fps <= 0:
        fps = 25
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ (—Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –±–∞—Ç–Ω–∏–∫–µ)
    total_frames = int(round(seconds * fps))
    
    # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã –∏ –∫–∞–¥—Ä—ã
    total_seconds = total_frames // fps
    frames = total_frames % fps
    
    hours = total_seconds // 3600
    total_seconds %= 3600
    
    minutes = total_seconds // 60
    seconds_int = total_seconds % 60
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°:–ö–ö
    return f"{hours:02d}:{minutes:02d}:{seconds_int:02d}:{frames:02d}"


def get_duration(video_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    try:
        result = subprocess.run(
            [get_ffprobe_path(), "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", video_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return float(result.stdout.strip())
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {e}")
        return None
        
def get_frame_rate(video_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ (FPS)"""
    try:
        result = subprocess.run(
            [get_ffprobe_path(), "-v", "error", "-select_streams", "v:0", "-show_entries", "stream=r_frame_rate", "-of", "default=noprint_wrappers=1:nokey=1", video_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "30000/1001" (–¥–ª—è 29.97 fps)
        fps_str = result.stdout.strip()
        if '/' in fps_str:
            numerator, denominator = map(int, fps_str.split('/'))
            fps = numerator / denominator
        else:
            fps = float(fps_str)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        standard_fps = [8, 15, 24, 25, 30, 50, 60]
        for std_fps in standard_fps:
            if abs(fps - std_fps) < 0.5:
                return std_fps
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 29.97 –∏ 59.94 fps
        if abs(fps - 29.97) < 0.1:
            return 29.97
        if abs(fps - 59.94) < 0.1:
            return 59.94
            
        return round(fps, 2)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤: {e}")
        return 25.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π FPS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def generate_preview_path(video_path):
    hashed = hash_path(video_path)
    preview_dir = THUMBNAILS_DIR / hashed
    preview_dir.mkdir(parents=True, exist_ok=True)
    return preview_dir

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–æ–≤–æ–π process_frames_with_pts, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∫–æ–¥—ã
# –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞–¥—Ä–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ -frame_pts
def save_description(video_path, output_folder):
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è process_frames_with_pts.
    """
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ
    fps = get_frame_rate(video_path)
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    process_frames_with_pts(video_path, output_folder, fps)

def stop_processing():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É."""
    global processing_active, current_process
    
    processing_active = False
    
    if current_process:
        try:
            # –î–ª—è Windows
            if os.name == 'nt':
                subprocess.run(['taskkill', '/F', '/T', '/PID', str(current_process.pid)], 
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)
            # –î–ª—è Unix/Linux
            else:
                os.killpg(os.getpgid(current_process.pid), signal.SIGTERM)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        current_process = None
        print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

def process_folder_recursive(folder_path: str, on_update=lambda: None):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∞—Ö.
    
    Args:
        folder_path (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        on_update (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    global processing_active
    
    processing_active = True
    
    for root, _, files in os.walk(folder_path):
        for file in files:
            if not processing_active:
                return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                
            if file.lower().endswith(tuple(VIDEO_EXTENSIONS)):
                full_path = os.path.join(root, file)
                process_video_file(full_path, on_update)

def get_frame_pts_from_filename(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å frame_pts.
    –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ frame_XX.webp –∏–ª–∏ preview_XXX.webp.
    
    Args:
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        int: –ù–æ–º–µ—Ä –∫–∞–¥—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: preview_000.webp –∏ frame_123.webp
        if filename.startswith("preview_"):
            frame_number = int(filename.split("_")[1].split(".")[0])
        elif filename.startswith("frame_"):
            frame_number = int(filename.split("_")[1].split(".")[0])
        else:
            return None
            
        return frame_number
    except (ValueError, IndexError):
        return None

def calculate_timecode_from_frame_number(frame_number, fps):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–¥—Ä–∞ –∏ fps.
    –¢–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ run_scene_detection.bat.
    
    Args:
        frame_number (int): –ù–æ–º–µ—Ä –∫–∞–¥—Ä–∞
        fps (float): –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∞–π–º–∫–æ–¥–æ–º, –ø–æ–∑–∏—Ü–∏–µ–π –∏ fps
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º fps –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–∫–∞–∫ –≤ bat-—Ñ–∞–π–ª–µ)
    fps_int = int(round(fps))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∏ –æ—Å—Ç–∞—Ç–æ–∫ (–Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—É–Ω–¥—ã)
    total_seconds = frame_number // fps_int
    remainder = frame_number % fps_int
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    position_seconds = frame_number / fps_int
    
    # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã
    hours = total_seconds // 3600
    total_seconds %= 3600
    
    minutes = total_seconds // 60
    seconds = total_seconds % 60
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°:–ö–ö
    timecode = f"{hours:02d}:{minutes:02d}:{seconds:02d}:{remainder:02d}"
    
    return {
        "timestamp": timecode,
        "fps": fps,
        "position": position_seconds
    }




def process_video_file(video_path: str, on_update=lambda: None):
    global processing_active, current_process

    if not processing_active:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {os.path.basename(video_path)}: –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    if not os.path.exists(video_path) or not os.path.isfile(video_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {video_path}")
        return

    try:
        print(f"üéûÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(video_path)}")
        duration = get_duration(video_path)
        if not duration:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_path}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        return

    settings = load_settings()
    scene_detection = settings.get("scene_edit_detection", False)
    output_folder = generate_preview_path(video_path)
    fps = get_frame_rate(video_path)
    print(f"üìä FPS: {fps} | üé¨ Scene detection: {scene_detection}")

    if scene_detection:
        # –°—Ü–µ–Ω—ã: –±–µ—Ä—ë–º –∫–∞–¥—Ä—ã –ø–æ scene change
        output_pattern = output_folder / "preview_%03d.webp"
        command = [
            str(get_ffmpeg_path()),
            "-i", video_path,
            "-an",
            "-vf", "select='eq(n,0)+gt(scene,0.4)',scale=1280:720",
            "-vsync", "vfr",
            "-frame_pts", "1",
            "-vcodec", "libwebp",
            "-f", "image2",
            "-y", str(output_pattern)
        ]
    else:
        # –ë–µ–∑ —Å—Ü–µ–Ω: –±–µ—Ä—ë–º –∫–∞–¥—Ä –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –≤–∏–¥–µ–æ
        middle_point = duration / 2
        fallback_frame = int(middle_point * fps)
        output_file = output_folder / f"preview_{fallback_frame:03d}.webp"
        command = [
            str(get_ffmpeg_path()),
            "-ss", str(middle_point),
            "-i", video_path,
            "-an",
            "-vf", "scale=1280:720",
            "-frames:v", "1",
            "-vcodec", "libwebp",
            "-f", "image2",
            "-y", str(output_file)
        ]

    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ FFMPEG:", ' '.join(map(str, command)))

    try:
        current_process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            preexec_fn=os.setsid if os.name != 'nt' else None
        )
        stdout, stderr = current_process.communicate()
        print("üßæ STDOUT:", stdout)
        print("üõë STDERR:", stderr)
        current_process = None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ffmpeg: {e}")
        current_process = None

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
    if processing_active:
        try:
            print("üï∞Ô∏è –†–∞—Å—á—ë—Ç —Ç–∞–π–º–∫–æ–¥–æ–≤...")
            process_frames_with_pts(video_path, output_folder, fps)
            print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_folder.name}")
            on_update()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ç–∞–π–º–∫–æ–¥–æ–≤: {e}")
            import traceback
            traceback.print_exc()



def process_frames_with_pts(video_path, output_folder, fps):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã, –≤—ã—á–∏—Å–ª—è—è —Ç–∞–π–º–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–¥—Ä–∞.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ .webp —Ñ–∞–π–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞ –∏–∑ –µ–≥–æ –∏–º–µ–Ω–∏ –∏ –∑–∞—Ç–µ–º
    —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ calculate_timecode_from_frame_number.
    –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ JSON-—Ñ–∞–π–ª–µ descriptions_loc.json.
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
        output_folder (str): –ü–∞–ø–∫–∞ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –∫–∞–¥—Ä–∞–º–∏
        fps (float): –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ
    """
    print("üï∞Ô∏è –†–∞—Å—á–µ—Ç —Ç–∞–π–º–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–¥—Ä–æ–≤...")
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    mapping = {}
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–¥—Ä–∞
    webp_files = [f for f in os.listdir(output_folder) if f.endswith(".webp")]
    webp_files.sort(key=lambda x: int(x.split("_")[1].split(".")[0]) if "_" in x and x.split("_")[1].split(".")[0].isdigit() else 0)
    
    print(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(webp_files)} –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    for file in webp_files:
        frame_number = get_frame_pts_from_filename(file)
        if frame_number is not None:
            timecode_info = calculate_timecode_from_frame_number(frame_number, fps)
            mapping[file] = {
                "source": str(Path(video_path).resolve()),
                **timecode_info
            }
            print(f"üïê –ö–∞–¥—Ä {file}: {timecode_info['timestamp']} @ {fps} fps")
        else:
            mapping[file] = str(Path(video_path).resolve())
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–π–º–∫–æ–¥ –¥–ª—è {file}")
    
    json_path = os.path.join(output_folder, "descriptions_loc.json")
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(mapping, f, ensure_ascii=False, indent=4)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω JSON —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏: {json_path}")
    return True


def get_thumbnail_dir_name(video_path):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        
    Returns:
        str: –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
    """
    return hash_path(video_path)

def get_thumbnail_by_video_path(video_path):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        
    Returns:
        Path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    dir_name = get_thumbnail_dir_name(video_path)
    thumbnail_dir = THUMBNAILS_DIR / dir_name
    
    if thumbnail_dir.exists():
        return thumbnail_dir
    
    return None

def start_processing(file_paths=None, folder_path=None, on_update=lambda: None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    
    Args:
        file_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        folder_path (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        on_update (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    global processing_active
    
    # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if folder_path:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {folder_path}")
    elif file_paths:
        if len(file_paths) == 1:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_paths[0]}")
        else:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(file_paths)} —Ñ–∞–π–ª–æ–≤: {', '.join([os.path.basename(f) for f in file_paths[:3]])}{' –∏ –¥—Ä.' if len(file_paths) > 3 else ''}")
    else:
        print("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ —Ñ–∞–π–ª—ã, –Ω–∏ –ø–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if processing_active:
        print("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π")
        stop_processing()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_active = True
    
    def process_thread():
        global processing_active
        try:
            if folder_path:
                print(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–ø–∫–∏: {folder_path}")
                process_folder_recursive(folder_path, on_update)
            elif file_paths:
                print(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–∏—Å–∫–∞ –∏–∑ {len(file_paths)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(file_paths):
                    if not processing_active:
                        print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        break  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    print(f"üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1}/{len(file_paths)}: {file_path}")
                    process_video_file(file_path, on_update)
            
            # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            if processing_active:
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        finally:
            # –í—ã–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            processing_active = False
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            on_update()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=process_thread).start()
