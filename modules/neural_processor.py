"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
"""

import os
import json
import time
import threading
import requests
import base64
from pathlib import Path
from modules.settings_manager import load_settings

class MistralAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Mistral API
    """
    def __init__(self, api_keys):
        self.api_keys = api_keys if isinstance(api_keys, list) else [api_keys]
        self.key_index = 0
        self.model = "mistral-large-latest"  # –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –±—É–¥—É—â–µ–º

    def _get_next_key(self):
        key = self.api_keys[self.key_index]
        self.key_index = (self.key_index + 1) % len(self.api_keys)
        return key

    def process_text(self, text, language="ru"):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Mistral API
        """
        headers = {
            "Authorization": f"Bearer {self._get_next_key()}",
            "Content-Type": "application/json"
        }
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        prompt = (
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –æ—á–∏—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, "
            "—É–±–µ—Ä–∏ \\n –∏ **, —Å–¥–µ–ª–∞–π –µ–≥–æ –∫—Ä–∞—Ç–∫–∏–º, –ø—Ä–∏–≥–æ–¥–Ω—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞. "
            "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ç–µ–≥–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
            if language == "ru" else
            "Edit the following image description: remove unnecessary introductory phrases, clean up formatting, "
            "remove \\n and **, make it concise and searchable. Add tags based on content at the end. Respond in English."
        )
        
        payload = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": f"{prompt}\n\n{text}"}
            ],
            "temperature": 0.1,
            "top_p": 0.9,
            "max_tokens": 500
        }
        
        try:
            response = requests.post(
                "https://api.mistral.ai/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                return data["choices"][0]["message"]["content"]
            else:
                print(f"–û—à–∏–±–∫–∞ API Mistral: {response.status_code} {response.text}")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral API: {e}")
            return None


class PixtralAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Pixtral API
    """
    def __init__(self, api_keys):
        self.api_keys = api_keys if isinstance(api_keys, list) else [api_keys]
        self.key_index = 0
        self.model = "pixtral-v1"  # –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å

    def _get_next_key(self):
        key = self.api_keys[self.key_index]
        self.key_index = (self.key_index + 1) % len(self.api_keys)
        return key

    def process_image(self, image_path, language="ru"):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pixtral API
        """
        headers = {
            "Authorization": f"Bearer {self._get_next_key()}",
            "Content-Type": "application/json"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            with open(image_path, "rb") as image_file:
                image_data = base64.b64encode(image_file.read()).decode('utf-8')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {image_path}: {e}")
            return None
            
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        prompt = (
            "–û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ª–∏—à–Ω–∏–µ –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π \\n –∏ **."
            "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ç–µ–≥–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
            if language == "ru" else
            "Describe in detail what is shown in this image. Respond in English."
        )
        
        payload = {
            "model": self.model,
            "messages": [
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_data}"}}
                    ]
                }
            ],
            "temperature": 0.5,
            "top_p": 0.9,
            "max_tokens": 500
        }
        
        try:
            response = requests.post(
                "https://api.mistral.ai/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                return data["choices"][0]["message"]["content"]
            else:
                print(f"–û—à–∏–±–∫–∞ API Pixtral: {response.status_code} {response.text}")
                return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Pixtral API: {e}")
            return None


class NeuralProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
    """
    def __init__(self):
        self.running = False
        self.processing_thread = None
        self.settings = load_settings()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.mistral_api_keys = self.settings.get("mistral_api_keys", [])
        self.pixtral_api_keys = self.settings.get("pixtral_api_keys", [])
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç—ã
        self.mistral_api = MistralAPI(self.mistral_api_keys) if self.mistral_api_keys else None
        self.pixtral_api = PixtralAPI(self.pixtral_api_keys) if self.pixtral_api_keys else None

    def check_ready(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫ —Ä–∞–±–æ—Ç–µ
        
        Returns:
            bool: True, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤, –∏–Ω–∞—á–µ False
        """
        return (
            self.mistral_api is not None and len(self.mistral_api_keys) > 0 and
            self.pixtral_api is not None and len(self.pixtral_api_keys) > 0
        )

    def watch_thumbnails(self):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ thumbnails –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        thumbnails_dir = Path("thumbnails")
        processed_files = set()
        
        print("üîç –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        while self.running:
            try:
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–Ω—É—Ç—Ä–∏ thumbnails
                for subdir in thumbnails_dir.glob("*"):
                    if not subdir.is_dir() or not self.running:
                        continue
                    
                    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .webp
                    for image_file in subdir.glob("*.webp"):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
                        if image_file in processed_files:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        if self.needs_processing(image_file):
                            print(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ {image_file}...")
                            self.process_image(image_file)
                            processed_files.add(image_file)
                        else:
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                            processed_files.add(image_file)
                            
                # –ß—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                time.sleep(5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                time.sleep(10)  # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

    def needs_processing(self, image_path):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
        
        Args:
            image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        stem = image_path.stem
        pixtral_json = image_path.parent / f"{stem}_pixtral.json"
        mistral_json = image_path.parent / f"{stem}_mistral.json"
        
        # –ï—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        return not (pixtral_json.exists() and mistral_json.exists())

    def process_image(self, image_path):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        
        Args:
            image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        if not self.check_ready():
            print("‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã")
            return False
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        language = self.settings.get("language", "ru")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏–π
        stem = image_path.stem
        pixtral_json = image_path.parent / f"{stem}_pixtral.json"
        mistral_json = image_path.parent / f"{stem}_mistral.json"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Pixtral, –µ—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        pixtral_text = None
        if not pixtral_json.exists():
            try:
                pixtral_text = self.pixtral_api.process_image(str(image_path), language)
                if pixtral_text:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.save_pixtral_result(image_path, pixtral_text)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ Pixtral: {e}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Mistral, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –µ—Å—Ç—å Pixtral-–æ–ø–∏—Å–∞–Ω–∏–µ
        if not mistral_json.exists() and pixtral_text:
            try:
                self.process_with_mistral(image_path, pixtral_text)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ Mistral: {e}")
                
        return pixtral_json.exists() and mistral_json.exists()

    def save_pixtral_result(self, image_path, text):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Pixtral –≤ —Ñ–∞–π–ª
        
        Args:
            image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            text (str): –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        """
        stem = image_path.stem
        output_file = image_path.parent / f"{stem}_pixtral.json"
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump({"text": text}, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç Pixtral: {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Pixtral: {e}")

    def save_mistral_result(self, image_path, text):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Mistral –≤ —Ñ–∞–π–ª
        
        Args:
            image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            text (str): –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        """
        stem = image_path.stem
        output_file = image_path.parent / f"{stem}_mistral.json"
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump({"text": text}, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç Mistral: {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Mistral: {e}")

    def process_with_mistral(self, image_path, pixtral_text):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Mistral
        
        Args:
            image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            pixtral_text (str): –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç Pixtral
            
        Returns:
            str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        language = self.settings.get("language", "ru")
        
        mistral_text = self.mistral_api.process_text(pixtral_text, language)
        if mistral_text:
            self.save_mistral_result(image_path, mistral_text)
            return mistral_text
            
        return None

    def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if self.running:
            return
            
        if not self.check_ready():
            print("‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π")
            return
            
        self.running = True
        self.processing_thread = threading.Thread(target=self.watch_thumbnails)
        self.processing_thread.daemon = True
        self.processing_thread.start()
        
        print("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        self.running = False
        if self.processing_thread:
            self.processing_thread.join(1.0)  # –ñ–¥–µ–º –Ω–µ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
            self.processing_thread = None
            
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
